;Assignmenr no : 30h
;Assignment name : write an ALP to find number of positive / negative elements from 64-bit array
;-----------------------------------------------------------------------------------------------------------------
section .data
  nline     db  10,10
  nline_len equ $-nline
  
  ano     db  10,"   Assignment number - 3",10
          db "positive / negative elements from 64-bit array",10
  ano_len equ $-ano
  
  arr64   dq  -21H,5FH,-33H,11H,62H
  n       equ 5 
  
  pmsg      db  10,10,"The no. of positive elements from 64-bit array:"
  pmsg_len  equ $-pmsg
  
  nmsg       db 10,10,"The no. of Negative elements from 64-bit array :"
  nmsg_len  equ $-nmsg
;----------------------------------------------------------------------------------------------------------------
section .bss
  p_count  resq  1                    ; reserves a quadword
  n_count  resq  1                    ;
  char_ans resb  16
  
%macro print 2
  mov rax,1
  mov rdi,1
  mov rsi,%1
  mov rdx,%2
  syscall
%endmacro

%macro Read 2
  mov rax,0
  mov rdi,0
  mov rsi,%1
  mov rdx,%2
  syscall
%endmacro

%macro exit 0
  mov rax,60
  mov rdi,0
  syscall
%endmacro

;-----------------------------------------------------------------------------------------------------------------
section .text
  Global _start

_start:
  print ano,ano_len
  
  mov   rsi,arr64
  mov   rcx,n                   ; n is the counter for 5 numbers
  
  mov   rbx,0                   ;counter for +ve nos
  mov   rdx,0                   ;counter for -ve nos

next_num:
  mov   rax,[rsi]               ;take no. in rax
  Rol   rax,1                   ; rotate left 
  jc    negative                ; set carry 1 and jump to negative when the number is negative 
  
positive:                         
  inc   rbx                     ;rbx is a positive counter     
  jmp   next                    ; again jump next label
  
negative:                         
  inc   rdx                      ;inc negative counter
  
next:
  add rsi,8
  dec rcx
  jnz next_num
  
  mov[p_count],rbx          ;store positive
  mov[n_count],rdx          ;store negative 
  
  
  print pmsg,pmsg_len
  mov rax ,[p_count]        ;load value of p_count in rax
  call display              ;display p_count
  
  print nmsg,nmsg_len
  mov rax ,[n_count]        ;load value of n_count in rax
  call display              ;display n_count
  
  print nline,nline_len
  exit
  
;-----------------------------------------------------------------------------------------------------------------
display:
  mov rbx,16              ; divisor = 16 for hex
  mov rcx,2               ; number of digits
  mov rsi,char_ans+1      ; load last byte address of char_ans buffer ////

cnt:                      ;make rdx = 0 (as in div instruction rdx:rac/rbx)
  mov rdx,0               ;
  div rbx
  cmp dl,09h
  jbe add30
  add dl,07h

add30:
  add dl,30h
  mov[rsi],dl
  dec rsi
  dec rcx
  jnz cnt
  print char_ans,20
ret
