#include<iostream>
#include<vector>
using namespace std;
bool check_u_and_v(int u,int v,int vertex){
    if(u > vertex || v > vertex)
    {
        return 0;
    }
    
    return 1;
}
void Undirected_Unweighed(int vertex,int edge, vector<vector<int>> adjacencyMatrix)
{
    int u, v;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex of Edge :";
        cin >> u >> v;
        
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyMatrix[u][v] = 1;
            adjacencyMatrix[v][u] = 1;
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    {
        for (int j = 0; j < vertex; j++)
        {
            cout << adjacencyMatrix[i][j] << " ";
        }
        cout << endl;  // To print the matrix row by row
    }
}
void Undirected_Weighted(int vertex,int edge, vector<vector<int>> adjacencyMatrix)
{
    int u, v, weight;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex of Edges And Weight :";
        cin >> u >> v >> weight;
        
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyMatrix[u][v] = weight;
            adjacencyMatrix[v][u] = weight;
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    {
        for (int j = 0; j < vertex; j++)
        {
            cout << adjacencyMatrix[i][j] << " ";
        }
        cout << endl;  // To print the matrix row by row
    }
}

void Directed_UnWeighted(int vertex,int edge, vector<vector<int>> adjacencyMatrix)
{
    int u, v;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex Of Edges :";
        cin >> u >> v;
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyMatrix[u][v] = 1;
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    {
        for (int j = 0; j < vertex; j++)
        {
            cout << adjacencyMatrix[i][j] << " ";
        }
        cout << endl;  // To print the matrix row by row
    }
}
void Directed_Weighted(int vertex,int edge, vector<vector<int>> adjacencyMatrix)
{
    int u, v, weight;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex Of Edges And Weight:";
        cin >> u >> v >> weight;
         if(check_u_and_v(u,v,vertex))
        {
             adjacencyMatrix[u][v] = weight;
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    {
        for (int j = 0; j < vertex; j++)
        {
            cout << adjacencyMatrix[i][j] << " ";
        }
        cout << endl;  // To print the matrix row by row
    }
}
int main()
{
    int vertex, edge, choice;

    vector<vector<int>> adjacencyMatrix; 
    
    while (true)
    {
        cout << "\nEnter Choice:\n";
        cout << "1. Undirected Unweighed\n";
        cout << "2. Undirected Weighted\n";
        cout << "3. Directed UnWeighted\n";
        cout << "4. Directed Weighted\n";
        cout << "5. Exit\n";
        
        cout<<"\nEnter Choice :";
        cin >> choice;
        cout << "Enter Number of Vertex And Edge :";
        cin >> vertex >> edge;

        adjacencyMatrix.resize(vertex, vector<int>(vertex, 0));

        switch (choice)
        {
            case 1:
                Undirected_Unweighed(vertex,edge, adjacencyMatrix);
                break;

            case 2:
                Undirected_Weighted(vertex,edge, adjacencyMatrix);
                break;

            case 3:
                Directed_UnWeighted(vertex,edge, adjacencyMatrix);
                break;

            case 4:
                Directed_Weighted(vertex,edge, adjacencyMatrix);
                break;

            case 5:
                return 0;

            default:
                cout << "Incorrect Choice.\n";
        }
    }

    return 0;
}
