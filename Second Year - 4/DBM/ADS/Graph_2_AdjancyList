#include<iostream>
#include<vector>
using namespace std;
bool check_u_and_v(int u,int v,int vertex){
    if(u < vertex && v < vertex)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void Undirected_Unweighed(int vertex,int edge, vector<int> adjacencyList[])
{
    int u, v;

    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex of Edges :";
        cin >> u >> v;
        
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyList[u].push_back(v);
            adjacencyList[v].push_back(u);
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }

    for (int i = 0; i < vertex; i++)
    {  cout<<i<<" -> "; 
        for (int j = 0; j < adjacencyList[i].size(); j++)
        {
            cout << adjacencyList[i][j] << " ";
        }
        cout << endl;  
    }    

}
void Undirected_Weighted(int vertex,int edge, vector<pair<int,int>> adjacencyListWeigh[])
{
    int u, v, weight;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex of Edges And Weight :";
        cin >> u >> v >> weight;
        
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyListWeigh[u].push_back(make_pair(v,weight));
            adjacencyListWeigh[v].push_back(make_pair(u,weight));
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    {  cout<<i<<" -> "; 
        for (int j = 0; j < adjacencyListWeigh[i].size(); j++)
        {
            cout << adjacencyListWeigh[i][j].first<<","<<adjacencyListWeigh[i][j].second<<" ";
        }
        cout << endl;  
    }
}
void Directed_UnWeighted(int vertex,int edge, vector<int> adjacencyList[])
{
    int u, v;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex Of Edges :";
        cin >> u >> v;
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyList[u].push_back(v);
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    { cout<<i<<" -> ";
        for (int j = 0; j <  adjacencyList[i].size(); j++)
        {
            cout << adjacencyList[i][j] << " ";
        }
        cout << endl;  // To print the matrix row by row
    }
}
void Directed_Weighted(int vertex,int edge, vector<pair<int,int>> adjacencyListWeight[])
{
    int u, v, weight;
    for (int i = 0; i < edge; i++)
    {
        cout << "Enter Vertex Of Edges And Weight:";
        cin >> u >> v >> weight;
        if(check_u_and_v(u,v,vertex))
        {
            adjacencyListWeight[u].push_back(make_pair(v,weight));
        }
        else
        {
            cout<<"Enter Valid Vertex Of Edges.\n";
            i = i - 1;
        }
    }
    
    for (int i = 0; i < vertex; i++)
    {
        cout<<i<<" -> ";
        for (int j = 0; j < adjacencyListWeight[i].size(); j++)
        {
            cout << adjacencyListWeight[i][j].first<<","<<adjacencyListWeight[i][j].second<<" ";
        }
        cout << endl;  // To print the matrix row by row
    }
}
int main()
{
    int vertex, edge, choice;

    vector<int> adjacencyList[100];                      // to store unweighted
    vector<pair<int,int>> adjacencyListWeight[100];      // to store weighted
    
    while (true)
    {
        cout << "\nEnter Choice:\n";
        cout << "1. Undirected Unweighed\n";
        cout << "2. Undirected Weighted\n";
        cout << "3. Directed UnWeighted\n";
        cout << "4. Directed Weighted\n";
        cout << "5. Exit\n";
        
        cout<<"\nEnter Choice :";
        cin >> choice;
        cout << "Enter Number of Vertex And Edge :";
        cin >> vertex >> edge;

        

        switch (choice)
        {
            case 1:
                Undirected_Unweighed(vertex,edge, adjacencyList);
                break;

            case 2:
                Undirected_Weighted(vertex,edge, adjacencyListWeight);
                break;

            case 3:
                Directed_UnWeighted(vertex,edge, adjacencyList);
                break;

            case 4:
                Directed_Weighted(vertex,edge, adjacencyListWeight);
                break;

            case 5:
                return 0;

            default:
                cout << "Incorrect Choice.\n";
        }
    }

    return 0;
}
